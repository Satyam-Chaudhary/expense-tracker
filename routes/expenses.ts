import { Hono } from "hono";
import { z } from "zod";
import { zValidator } from "@hono/zod-validator";

export const expenseRoute = new Hono();

const expenseSchema = z.object({
  id: z.number().int().positive().min(1),
  title: z.string().min(3).max(100),
  amount: z.number().int().positive(),
});

const createPostSchema = expenseSchema.omit({ id: true }); // we can generate runime validation for expense using this, omit id from the schema as it is auto-generated by the server and not required in the request body

type Expense = z.infer<typeof expenseSchema>;

const fakeExpenses: Expense[] = [
  { id: 1, title: "Groceries", amount: 10 },
  { id: 2, title: "Transportation", amount: 20 },
  { id: 3, title: "Utilities", amount: 30 },
  { id: 4, title: "Entertainment", amount: 40 },
  { id: 5, title: "Dining Out", amount: 50 },
];

expenseRoute
  .get("/", (c) => {
    return c.json({ expenses: fakeExpenses });
  })
  .post("/", zValidator("json", createPostSchema), async (c) => {
    const expense = await c.req.valid("json"); // check if the request body is valid
    // const expense = createPostSchema.parse(data);// check if the request body is valid instead of this we can use the above line of code that uses zValidator middleware for validation given by hono
    fakeExpenses.push({ id: fakeExpenses.length + 1, ...expense });
    console.log(expense);
    return c.json(expense, 201);
  })
  .get("/:id{[0-9]+}", (c) => {
    //regex for id
    const id = Number.parseInt(c.req.param("id"));
    const expense = fakeExpenses.find((expense) => expense.id === id);
    if (!expense) {
      // return c.json({message: "Expense not found"}, 404); or use the  notFound method
      return c.notFound();
    }
    return c.json(expense);
  })
  .delete("/:id{[0-9]+}", (c) => {
    const id = Number.parseInt(c.req.param("id"));
    const index = fakeExpenses.findIndex((expense) => expense.id === id);
    if (index === -1) {
      return c.notFound();
    }
    fakeExpenses.splice(index, 1);
    return c.json({ message: "Expense deleted" });
  });
